// <auto-generated />
using System;
using LibraryManagement.Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Data.Migrations
{
    [DbContext(typeof(LibraryManagementDbContext))]
    partial class LibraryManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Data.Entity.AvailableBookNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNotificationSent")
                        .HasColumnType("bit")
                        .HasColumnName("IsNotificationSent");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NotificationDate");

                    b.HasKey("Id")
                        .HasName("availablebooknotification_pkey");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AvailableBookNotification", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Author");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.HasKey("Id")
                        .HasName("book_pkey");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.BookReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EndDate");

                    b.Property<bool>("RequestAvailabilityNotification")
                        .HasColumnType("bit")
                        .HasColumnName("RequestAvailabilityNotification");

                    b.Property<bool>("ReservationStatus")
                        .HasColumnType("bit")
                        .HasColumnName("ReservationStatus");

                    b.Property<DateTime>("ReservedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ReservedDate");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ReturnDate");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("StartDate");

                    b.HasKey("Id")
                        .HasName("bookreservation_pkey");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookReservation", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id")
                        .HasName("customer_pkey");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.OAuthAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ClientSecret");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GrantType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Scope");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.HasKey("Id")
                        .HasName("oauthauthentication_pkey");

                    b.ToTable("OAuthAuthentication", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.AvailableBookNotification", b =>
                {
                    b.HasOne("LibraryManagement.Data.Entity.Book", "Book")
                        .WithMany("AvailableBookNotifications")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_availablebooknotifications");

                    b.HasOne("LibraryManagement.Data.Entity.Customer", "Customer")
                        .WithMany("AvailableBookNotifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_availablebooknotifications");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.BookReservation", b =>
                {
                    b.HasOne("LibraryManagement.Data.Entity.Book", "Book")
                        .WithMany("BookReservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_bookreservations");

                    b.HasOne("LibraryManagement.Data.Entity.Customer", "Customer")
                        .WithMany("BookReservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_bookreservations");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.Book", b =>
                {
                    b.Navigation("AvailableBookNotifications");

                    b.Navigation("BookReservations");
                });

            modelBuilder.Entity("LibraryManagement.Data.Entity.Customer", b =>
                {
                    b.Navigation("AvailableBookNotifications");

                    b.Navigation("BookReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
